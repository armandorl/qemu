{
	"module": {
		"MC_CGM":{
			"soc": "s32g2",
			"name": "mc_cgm",
			"offset" : "0x40030000",
			"description": "Clock Generation Module 0",
			"helpers": "",
			"registers": {
				"MUX_0_CSC" : {
					"offset": "0x300",
					"reset": "0x0",
					"action": "PERFORM_WRITE(REG_MUX_0_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_0_CSS, (val & 0x0F00000F) | BIT(17));"
				},
				"MUX_0_CSS" : {
					"offset": "0x304",
					"reset": "0x80000",
					"action": "ignore"
				},
				"MUX_1_CSC" : {
					"offset": "0x340",
					"reset": "0x02000000",
					"action": "PERFORM_WRITE(REG_MUX_1_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_1_CSS, (val & 0x3F00000F) | BIT(17));"
				},
				"MUX_1_CSS" : {
					"offset": "0x344",
					"reset": "0x02020000",
					"action": "ignore"
				},
				"MUX_2_CSS" : {
					"offset": "0x384",
					"reset": "0x02020000",
					"action": "ignore"
				},
				"MUX_3_CSC" : {
					"offset": "0x3c0",
					"reset": "0x00000000",
					"action": "PERFORM_WRITE(REG_MUX_3_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_3_CSS, (val & 0x1F00000F) | BIT(17));"
				},
				"MUX_3_CSS" : {
					"offset": "0x3C4",
					"reset": "0x00080000",
					"action": "ignore"
				},
				"MUX_4_CSC" : {
					"offset": "0x400",
					"reset": "0x00000000",
					"action": "PERFORM_WRITE(REG_MUX_4_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_4_CSS, (val & 0x3F00000F) | BIT(17));"
				},
				"MUX_4_CSS" : {
					"offset": "0x404",
					"reset": "0x00080000",
					"action": "ignore"
				},
				"MUX_5_CSC" : {
					"offset": "0x440",
					"reset": "0x00000000",
					"action": "PERFORM_WRITE(REG_MUX_5_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_5_CSS, (val & 0x3F00000F) | BIT(17));"
				},
				"MUX_5_CSS" : {
					"offset": "0x444",
					"reset": "0x00080000",
					"action": "ignore"
				},
				"MUX_6_CSC" : {
					"offset": "0x480",
					"reset": "0x00000000",
					"action": "PERFORM_WRITE(REG_MUX_6_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_6_CSS, (val & 0x1F00000F) | BIT(17));"
				},
				"MUX_6_CSS" : {
					"offset": "0x484",
					"reset": "0x00080000",
					"action": "ignore"
				},
				"MUX_7_CSC" : {
					"offset": "0x4c0",
					"reset": "0x00000000",
					"action": "PERFORM_WRITE(REG_MUX_7_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_7_CSS, (val & 0x1F00000F) | BIT(17));"
				},
				"MUX_7_CSS" : {
					"offset": "0x4c4",
					"reset": "0x00080000",
					"action": "ignore"
				},
				"MUX_8_CSC" : {
					"offset": "0x500",
					"reset": "0x00000000",
					"action": "PERFORM_WRITE(REG_MUX_8_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_8_CSS, (val & 0x1F00000F) | BIT(17));"
				},
				"MUX_8_CSS" : {
					"offset": "0x504",
					"reset": "0x00080000",
					"action": "ignore"
				},
				"MUX_9_CSC" : {
					"offset": "0x540",
					"reset": "0x00000000",
					"action": "PERFORM_WRITE(REG_MUX_9_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_9_CSS, (val & 0x3F00000F) | BIT(17));"
				},
				"MUX_9_CSS" : {
					"offset": "0x544",
					"reset": "0x00080000",
					"action": "ignore"
				},
				"MUX_10_CSC" : {
					"offset": "0x580",
					"reset": "0x00000000",
					"action": "PERFORM_WRITE(REG_MUX_10_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_10_CSS, (val & 0x3F00000F) | BIT(17));"
				},
				"MUX_10_CSS" : {
					"offset": "0x584",
					"reset": "0x00080000",
					"action": "ignore"
				},
				"MUX_11_CSC" : {
					"offset": "0x5C0",
					"reset": "0x00000000",
					"action": "PERFORM_WRITE(REG_MUX_11_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_11_CSS, (val & 0x3F00000F) | BIT(17));"
				},
				"MUX_11_CSS" : {
					"offset": "0x5C4",
					"reset": "0x00080000",
					"action": "ignore"
				},
				"MUX_12_CSC" : {
					"offset": "0x600",
					"reset": "0x00000000",
					"action": "PERFORM_WRITE(REG_MUX_12_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_12_CSS, (val & 0x1F00000F) | BIT(17));"
				},
				"MUX_12_CSS" : {
					"offset": "0x604",
					"reset": "0x00080000",
					"action": "ignore"
				},
				"MUX_13_CSS" : {
					"offset": "0x644",
					"reset": "0x00080000",
					"action": "ignore"
				},
				"MUX_14_CSC" : {
					"offset": "0x680",
					"reset": "0x00000000",
					"action": "PERFORM_WRITE(REG_MUX_14_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_14_CSS, (val & 0x1F00000F) | BIT(17));"
				},
				"MUX_14_CSS" : {
					"offset": "0x684",
					"reset": "0x00080000",
					"action": "ignore"
				},
				"MUX_15_CSC" : {
					"offset": "0x6C0",
					"reset": "0x00000000",
					"action": "PERFORM_WRITE(REG_MUX_15_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_15_CSS, (val & 0x3F00000F) | BIT(17));"
				},
				"MUX_15_CSS" : {
					"offset": "0x6c4",
					"reset": "0x00080000",
					"action": "ignore"
				},
				"MUX_16_CSC" : {
					"offset": "0x700",
					"reset": "0x00000000",
					"action": "PERFORM_WRITE(REG_MUX_16_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_16_CSS, (val & 0x1F00000F) | BIT(17));"
				},
				"MUX_16_CSS" : {
					"offset": "0x704",
					"reset": "0x00080000",
					"action": "ignore"
				}

			},
			"size":"0x800"
		},
		"MC_CGM1":{
			"soc": "s32g2",
			"name": "mc_cgm1",
			"offset" : "0x40034000",
			"description": "Clock Generation Module 1",
			"helpers": "",
			"registers": {
				"PCFS_DIVE4" : {
					"offset": "0x2C",
					"reset": "0x3E7"
				},
				"PCFS_DIVS4" : {
					"offset": "0x30",
					"reset": "0x3E7"
				},
				"MUX_0_CSC" : {
					"offset": "0x300",
					"reset": "0x0",
					"action": "PERFORM_WRITE(REG_MUX_0_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_0_CSS, ((val & 0x0700000F) | BIT(17)));"
				},
				"MUX_0_CSS" : {
					"offset": "0x304",
					"reset": "0x00080000"
				}

			},
			"size":"0x400"
		},
		"RTC":{
			"soc": "s32g2",
			"name": "rtc",
			"offset" : "0x40060000",
			"description": "Real Time Clock Module",
			"helpers": "static int supervisor_mode=1;\nstatic QEMUTimer timer1;\nstatic void trigger_hardware_init(void* opaque){}",
			"registers": {
				"RTCSUPV" : {
					"offset": "0x0",
					"reset": "0x80000000",
					"action": "supervisor_mode=!!(val&0x80000000);"
				},
				"RTCC" : {
					"offset": "0x4",
					"reset": "0x0",
					"action": "if(supervisor_mode) { printf(\"Set RTC:0x%08lx\\n\", val);\n if(val&0x80000000){ printf(\"RTC timer enabled\\n\");\ntimer_init_ms(&timer1, QEMU_CLOCK_VIRTUAL, trigger_hardware_init, s);\ntimer_mod(&timer1, qemu_clock_get_ms(QEMU_CLOCK_VIRTUAL) + 100); } }\nelse{ printf(\"ERROR: Set RTC value while not on supervisor mode\\n\");}"
				},
				"RTCS" : {
					"offset": "0x8",
					"reset": "0x80000000",
					"action": "supervisor_mode=1;"
				}

			},
			"size":"0x400"
		},
		"MC_CGM5":{
			"soc": "s32g2",
			"name": "mc_cgm5",
			"offset" : "0x40068000",
			"description": "Clock Generation Module 5",
			"helpers": "",
			"registers": {
				"MUX_0_CSC" : {
					"offset": "0x300",
					"reset": "0x0",
					"action": "PERFORM_WRITE(REG_MUX_0_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_0_CSS, (val & 0x3F00000F) | BIT(17));"
				},
				"MUX_0_CSS" : {
					"offset": "0x304",
					"reset": "0x00080000"
				}

			},
			"size":"0x400"
		},
		"PLL":{
			"soc": "s32g2",
			"name": "pll",
			"offset" : "0x40038000",
			"description": "PLL Module",
			"helpers": "",
			"registers": {
				"PLLCR" : {
					"offset": "0x0",
					"reset": "0x80000000",
					"action": "if((val&BIT(31))==BIT(31))PERFORM_WRITE(REG_PLLSR,BIT(2));"
				},
				"PLLSR" : {
					"offset": "0x4",
					"reset": "0x0300",
					"action": "ignore"
				},
				"PLLDV" : {
					"offset": "0x8",
					"reset": "0x0C3F1032"
				},
				"PLLFM" : {
					"offset": "0xC",
					"reset": "0x40000000"
				}

			},
			"size":"0x100"
		},
		"XOSC":{
			"soc": "s32g2",
			"name": "xosc",
			"offset" : "0x40050000",
			"description": "Fast oscilator Module",
			"helpers": "",
			"registers": {
				"CTRL" : {
					"offset": "0x0",
					"reset": "0x019D00C0",
					"action": "if((val&BIT(0))==BIT(0))PERFORM_WRITE(REG_STAT,BIT(31));"
				},
				"STAT" : {
					"offset": "0x4",
					"reset": "0x0",
					"action": "ignore"
				}

			},
			"size":"0x100"
		},
		"DFS":{
			"soc": "s32g2",
			"name": "dfs",
			"offset" : "0x40054000",
			"description": "Digital Frequency Synthesizer",
			"helpers": "",
			"registers": {
				"PORTSR" : {
					"offset": "0xC",
					"reset": "0x0",
					"action": "ignore"
				},
				"PORTLOLSR" : {
					"offset": "0x10",
					"reset": "0x0",
					"action": "PERFORM_WRITE(REG_PORTLOLSR, 0 );"
				},
				"PORTRESET" : {
					"offset": "0x14",
					"reset": "0x3f",
					"action": "unsigned int tmp=~((PERFORM_READ(REG_PORTRESET))&0x3F);\nPERFORM_WRITE(REG_PORTSR, tmp);\nPERFORM_WRITE(REG_PORTLOLSR, 0);"
				},
				"CTL" : {
					"offset": "0x18",
					"reset": "0x2"
				}

			},
			"size":"0x100"
		},
		"MC_RGM":{
			"soc": "s32g2",
			"name": "mc_rgm",
			"offset" : "0x40078000",
			"description": "Reset Generation Module",
			"helpers": "static QEMUTimer timer1;static uint32_t prev_rst1=0; static uint32_t event=0; static void trigger_hardware_init(void* opaque){S32G2mc_rgmState *s = S32G2_MC_RGM(opaque); uint32_t tmp_event=event; uint32_t tmp = PERFORM_READ(REG_PRST1); PERFORM_WRITE(REG_PSTAT1,  PERFORM_READ(REG_PSTAT1) | (tmp&0x1F)); timer_del(&timer1);timer_deinit(&timer1); CPUState *cs; for (cs = first_cpu; cs; cs = CPU_NEXT(cs)){ if(tmp_event & BIT(1)){ if(tmp & BIT(1)){ qatomic_set(&cs->halted, true);} else { qatomic_set(&cs->halted, false);} tmp=tmp>>1; tmp_event=tmp_event>>1;}}}",
			"registers": {
				"DES" : {
					"offset": "0x0",
					"reset": "0x1"
				},
				"FES" : {
					"offset": "0x8",
					"reset": "0x0"
				},
				"FES" : {
					"offset": "0x8",
					"reset": "0x0"
				},
				"PRST0" : {
					"offset": "0x40",
					"reset": "0x0",
					"action": "PERFORM_WRITE(REG_PSTAT0, val);"
				},
				"PRST1" : {
					"offset": "0x48",
					"reset": "0x0",
					"action": "PERFORM_WRITE(REG_PRST1, val&0x1F); event = (val&0x1F)^(prev_rst1); if(event & ((event&val)==0)) { timer_init_ms(&timer1, QEMU_CLOCK_VIRTUAL, trigger_hardware_init, s);\ntimer_mod(&timer1, qemu_clock_get_ms(QEMU_CLOCK_VIRTUAL) + 10);}"
				},
				"PRST2" : {
					"offset": "0x50",
					"reset": "0x0",
					"action": "PERFORM_WRITE(REG_PSTAT2, val);"
				},
				"PRST3" : {
					"offset": "0x58",
					"reset": "0x0",
					"action": "PERFORM_WRITE(REG_PSTAT3, val);"
				},
				"PSTAT0" : {
					"offset": "0x140",
					"reset": "0x0",
					"action": "ignore"
				},
				"PSTAT1" : {
					"offset": "0x148",
					"reset": "0x1F",
					"action": "ignore"
				},
				"PSTAT2" : {
					"offset": "0x150",
					"reset": "0x0",
					"action": "ignore"
				},
				"PSTAT3" : {
					"offset": "0x158",
					"reset": "0x0",
					"action": "ignore"
				}

			},
			"size":"0x200"
		},
		"SRC":{
			"soc": "s32g2",
			"name": "src",
			"offset" : "0x4007C000",
			"description": "System Resource Controller",
			"helpers": "",
			"registers": {
				"CMU_STAT0" : {
					"offset": "0x28",
					"reset": "0x0",
					"action": "PERFORM_WRITE(REG_CMU_STAT0, 0);"
				},
				"CMU_STAT1" : {
					"offset": "0x2C",
					"reset": "0x0",
					"action": "PERFORM_WRITE(REG_CMU_STAT1, 0);"
				}
				
			},
			"size":"0x1000"
		},
		"RDC":{
			"soc": "s32g2",
			"name": "rdc",
			"offset" : "0x40080000",
			"description": "Reset Domain Controller",
			"helpers": "",
			"registers": {
				"RD1_CTRL" : {
					"offset": "0x4",
					"reset": "0xf"
				},
				"RD2_CTRL" : {
					"offset": "0x8",
					"reset": "0xf",
					"action": "if((val&0x8)==0x8)PERFORM_WRITE(REG_RD2_STAT, 0x18);\nif((val&0x8)==0)PERFORM_WRITE(REG_RD2_STAT, 0);"
				},
				"RD3_CTRL" : {
					"offset": "0xC",
					"reset": "0xf",
					"action": "if((val&0x8)==0x8)PERFORM_WRITE(REG_RD3_STAT, 0x18);\nif((val&0x8)==0)PERFORM_WRITE(REG_RD3_STAT, 0);"
				},
				"RD1_STAT" : {
					"offset": "0x84",
					"reset": "0x18",
					"action":"ignore"
				},
				"RD2_STAT" : {
					"offset": "0x88",
					"reset": "0x18",
					"action":"ignore"
				},
				"RD3_STAT" : {
					"offset": "0x8c",
					"reset": "0x18",
					"action":"ignore"
				}

			},
			"size":"0x100"
		},
		"MC_ME":{
			"soc": "s32g2",
			"name": "mc_me",
			"offset" : "0x40088000",
			"description": "Mode Entry Module",
			"helpers": "static unsigned int conf_control=0;\nstatic QEMUTimer timer1;\nstatic void trigger_hardware_init(void* opaque){\nS32G2mc_meState *s = S32G2_MC_ME(opaque);\nunsigned int x=0;\nconf_control=0;\nx=PERFORM_READ(REG_PRTN3_PUPD) & PERFORM_READ(REG_PRTN3_PCONF);\nPERFORM_WRITE(REG_PRTN3_STAT, x);\nPERFORM_WRITE(REG_PRTN3_PUPD, 0);\nx=PERFORM_READ(REG_PRTN0_PUPD) & PERFORM_READ(REG_PRTN0_PCONF);\nPERFORM_WRITE(REG_PRTN0_STAT, x);\nPERFORM_WRITE(REG_PRTN0_PUPD, 0);\nPERFORM_WRITE(REG_PRTN0_COFB0_STAT, 0xFFFFFFFF);\nx=PERFORM_READ(REG_PRTN2_PUPD) & PERFORM_READ(REG_PRTN2_PCONF);\nPERFORM_WRITE(REG_PRTN2_STAT, x);\nPERFORM_WRITE(REG_PRTN2_PUPD, 0);\nPERFORM_WRITE(REG_PRTN2_COFB0_STAT, 0xFFFFFFFF);timer_del(&timer1);\ntimer_deinit(&timer1);\n}\n",
			"registers": {
				"CTRL_KEY" : {
					"offset": "0x0",
					"reset": "0x5af0",
					"action": "if(conf_control==0) conf_control++;\nif(conf_control==1) {\ntimer_init_ms(&timer1, QEMU_CLOCK_VIRTUAL, trigger_hardware_init, s);\ntimer_mod(&timer1, qemu_clock_get_ms(QEMU_CLOCK_VIRTUAL) + 10);}"
				},
				"MODE_STAT" : {
					"offset": "0xC",
					"reset": "0",
					"action":"ignore"
				},
				"PRTN0_PCONF" : {
					"offset": "0x100",
					"reset": "0x1"
				},
				"PRTN0_PUPD" : {
					"offset": "0x104",
					"reset": "0"
				},
				"PRTN0_STAT" : {
					"offset": "0x108",
					"reset": "0x1",
					"action":"ignore"
				},
				"PRTN0_COFB0_STAT": {
					"offset": "0x110",
					"reset": "0"
				},
				"PRTN1_STAT" : {
					"offset": "0x308",
					"reset": "0x1",
					"action" : "ignore"
				},
				"PRTN1_CORE0_STAT" : {
					"offset": "0x348",
					"reset": "0x1",
					"action" : "ignore"
				},
				"PRTN1_CORE1_PUPD" : {
					"offset": "0x364",
					"reset": "0x0",
					"action" : "{ uint32_t addr= PERFORM_READ(REG_PRTN1_CORE1_ADDR);\n PERFORM_WRITE(REG_PRTN1_CORE1_STAT, val); CPUState *cpu = qemu_get_cpu(1); cpu_set_pc(cpu, (vaddr)addr); }"
				},
				"PRTN1_CORE1_STAT" : {
					"offset": "0x368",
					"reset": "0x0",
					"action" : "ignore"
				},
				"PRTN1_CORE1_ADDR" : {
					"offset": "0x36C",
					"reset": "0x0",
					"action" : "PERFORM_WRITE(REG_PRTN1_CORE1_ADDR, val & 0xfffffffe)"
				},
				"PRTN1_CORE2_PUPD" : {
					"offset": "0x384",
					"reset": "0x0",
					"action" : "{ uint32_t addr= PERFORM_READ(REG_PRTN1_CORE2_ADDR);\n PERFORM_WRITE(REG_PRTN1_CORE2_STAT, val); CPUState *cpu = qemu_get_cpu(2); cpu_set_pc(cpu, (vaddr)addr); }"
				},
				"PRTN1_CORE2_STAT" : {
					"offset": "0x388",
					"reset": "0x0",
					"action" : "ignore"
				},
				"PRTN1_CORE2_ADDR" : {
					"offset": "0x38C",
					"reset": "0x0",
					"action" : "PERFORM_WRITE(REG_PRTN1_CORE2_ADDR, val & 0xfffffffe)"
				},
				"PRTN1_CORE3_PUPD" : {
					"offset": "0x3A4",
					"reset": "0x0",
					"action" : "{ uint32_t addr= PERFORM_READ(REG_PRTN1_CORE3_ADDR);\n PERFORM_WRITE(REG_PRTN1_CORE3_STAT, val); CPUState *cpu = qemu_get_cpu(3); cpu_set_pc(cpu, (vaddr)addr); }"
				},
				"PRTN1_CORE3_STAT" : {
					"offset": "0x3A8",
					"reset": "0x0",
					"action" : "ignore"
				},
				"PRTN1_CORE3_ADDR" : {
					"offset": "0x3AC",
					"reset": "0x0",
					"action" : "PERFORM_WRITE(REG_PRTN1_CORE3_ADDR, val & 0xfffffffe)"
				},
				"PRTN2_PCONF" : {
					"offset": "0x500",
					"reset": "0x4"
				},
				"PRTN2_PUPD" : {
					"offset": "0x504",
					"reset": "0"
				},
				"PRTN2_STAT" : {
					"offset": "0x508",
					"reset": "0x4",
					"action":"ignore"
				},
				"PRTN2_COFB0_STAT": {
					"offset": "0x510",
					"reset": "0"
				},
				"PRTN3_PCONF" : {
					"offset": "0x700",
					"reset": "0"
				},
				"PRTN3_PUPD" : {
					"offset": "0x704",
					"reset": "0"
				},
				"PRTN3_STAT" : {
					"offset": "0x708",
					"reset": "0",
					"action":"ignore"
				}

			},
			"size":"0x800"
		},
		"WKPU":{
			"soc": "s32g2",
			"name": "wkpu",
			"offset" : "0x40090000",
			"description": "Wakeup Unit",
			"helpers": "",
			"registers": {
				"NSR" : {
					"offset": "0x0",
					"reset": "0x0",
					"action":"ignore"
				}

			},
			"size":"0x100"
		},
		"SIUL2":{
			"soc": "s32g2",
			"name": "siul2",
			"offset" : "0x4009C000",
			"description": "System Integration Unit Lite2",
			"helpers": "",
			"registers": {
				"MIDR1" : {
					"offset": "0x4",
					"reset": "0x1D120011",
					"action":"ignore"
				},
				"MIDR2" : {
					"offset": "0x8",
					"reset": "0x48BB0000",
					"action":"ignore"
				}

			},
			"size":"0x5000",
			"min_access":1
		},
		"QSPI":{
			"soc": "s32g2",
			"name": "qspi",
			"offset" : "0x40134000",
			"description": "QSPI Module",
			"helpers": "",
			"registers": {
				"DLLCRA" : {
					"offset": "0x60",
					"reset": "0x01200000",
					"action":"if((val&0x1)==0)PERFORM_WRITE(REG_DLLSR, PERFORM_READ(REG_DLLSR) | BIT(14));"
				},
				"DLLSR" : {
					"offset": "0x12C",
					"reset": "0x80008000",
					"action":"ignore"
				}

			},
			"size":"0x2000"
		},
		"PIT":{
			"soc": "s32g2",
			"name": "pit",
			"offset" : "0x40188000",
			"description": "Periodic Interrupt Timer Module",
			"helpers": "#define SET_FLAG(a) PERFORM_WRITE(REG_TFLG##a, 1)\n#define SET_CURR_TIMER(a,b,c,d) if(c) { PERFORM_WRITE(REG_TFLG##a, (d>>32)&0xFFFFFFFF);PERFORM_WRITE(REG_TFLG##b, d&0xFFFFFFFF); } else {PERFORM_WRITE(REG_TFLG##a, d&0xFFFFFFFF);}\n\n#define PIT_MAX_TIMERS    7\n#define PIT_MCR_MDIS    BIT(1)\n#define PIT_TCTRL_CHN    BIT(2)\n#define PIT_TCRL_TIE    BIT(1)\n#define PIT_TCRL_TEN    BIT(0)\n\nstatic QEMUTimer qemu_timer; static unsigned int pits_disabled=0;\nstatic usigned long long timer[PIT_MAX_TIMERS]={0};\nstatic unsigned int timer_status[PIT_MAX_TIMERS]={0};\n\nstatic void process_expired_timer(unsigned int idx, void* opaque){\nS32G2pitState *s = S32G2_PIT(opaque);\nSET_FLAG(idx);\n}\nstatic void pit_timer_handler(void* opaque){\nS32G2pitState *s = S32G2_PIT(opaque);\nunsigned int i=0;\n\nfor(i=PIT_MAX_TIMERS-1; i>=0;i--){\nif((timer_status[i]&PIT_TCRL_TEN)==PIT_TCRL_TEN){\ntimer--;\nSET_CURR_TIMER(i,(i-1),((timer_status[i]&PIT_TCTRL_CHN)==PIT_TCTRL_CHN),timer);\nif(timer==0){process_expired_timer(i, (void*)s);}\nif((timer_status[i]&PIT_TCTRL_CHN)==PIT_TCTRL_CHN){\n i--; } }\n}\ntimer_mod(&qemu_timer, qemu_clock_get_ns(QEMU_CLOCK_VIRTUAL) + 10);\n}\nvoid set_timer_status(unsigned int idx, unsigned int value);\n\nvoid set_pit_timer(int idx, unsigned int value){\nif((pits_disabled==0) && (idx<PIT_MAX_TIMERS)){\ntimer_status[idx]=value; timer_init_ns(&qemu_timer, QEMU_CLOCK_VIRTUAL, pit_timer_handler, s); } }\nvoid pit_load_value(unsigned int idx, unsigned int value){\n if(((timer_status[i]&PIT_TCRL_TEN)==PIT_TCRL_TEN) && (idx < PIT_MAX_TIMERS))timer[idx]=value;\n}\n",
			"registers": {
				"MCR" : {
					"offset": "0",
					"reset": "0x0",
					"action":"if((val&PIT_MCR_MDIS)==PIT_MCR_MDIS){pits_disabled=1;}else{pits_disabled=0;}\n"
				},
				"TCTRL0" : {
					"offset": "0x108",
					"reset": "0x0",
					"action":"set_pit_timer(0, val);"
				},
				"TCTRL1" : {
					"offset": "0x118",
					"reset": "0x0",
					"action":"set_pit_timer(1, val);"
				},
				"TCTRL2" : {
					"offset": "0x128",
					"reset": "0x0",
					"action":"set_pit_timer(2, val);"
				},
				"TCTRL3" : {
					"offset": "0x138",
					"reset": "0x0",
					"action":"set_pit_timer(3, val);"
				},
				"TCTRL4" : {
					"offset": "0x148",
					"reset": "0x0",
					"action":"set_pit_timer(4, val);"
				},
				"TCTRL5" : {
					"offset": "0x158",
					"reset": "0x0",
					"action":"set_pit_timer(5, val);"
				},
				"TCTRL6" : {
					"offset": "0x168",
					"reset": "0x0",
					"action":"set_pit_timer(6, val);"
				},
				"TFLG0" : {
					"offset": "0x10C",
					"reset": "0x0",
					"action":"ignore"
				},
				"TFLG1" : {
					"offset": "0x11C",
					"reset": "0x0",
					"action":"ignore"
				},
				"TFLG2" : {
					"offset": "0x12C",
					"reset": "0x0",
					"action":"ignore"
				},
				"TFLG3" : {
					"offset": "0x13C",
					"reset": "0x0",
					"action":"ignore"
				},
				"TFLG4" : {
					"offset": "0x14C",
					"reset": "0x0",
					"action":"ignore"
				},
				"TFLG5" : {
					"offset": "0x15C",
					"reset": "0x0",
					"action":"ignore"
				},
				"TFLG6" : {
					"offset": "0x16C",
					"reset": "0x0",
					"action":"ignore"
				},
				"LDVAL0" : {
					"offset": "0x100",
					"reset": "0x0",
					"action":"pit_load_value(0, val);"
				},
				"LDVAL1" : {
					"offset": "0x110",
					"reset": "0x0",
					"action":"pit_load_value(1, val);"
				},
				"LDVAL2" : {
					"offset": "0x120",
					"reset": "0x0",
					"action":"pit_load_value(2, val);"
				},
				"LDVAL3" : {
					"offset": "0x130",
					"reset": "0x0",
					"action":"pit_load_value(3, val);"
				},
				"LDVAL4" : {
					"offset": "0x140",
					"reset": "0x0",
					"action":"pit_load_value(4, val);"
				},
				"LDVAL5" : {
					"offset": "0x150",
					"reset": "0x0",
					"action":"pit_load_value(5, val);"
				},
				"LDVAL6" : {
					"offset": "0x160",
					"reset": "0x0",
					"action":"pit_load_value(6, val);"
				},
				"CVAL0" : {
					"offset": "0x104",
					"reset": "0x0",
					"action":"ignore"
				},
				"CVAL1" : {
					"offset": "0x114",
					"reset": "0x0",
					"action":"ignore"
				},
				"CVAL2" : {
					"offset": "0x124",
					"reset": "0x0",
					"action":"ignore"
				},
				"CVAL3" : {
					"offset": "0x134",
					"reset": "0x0",
					"action":"ignore"
				},
				"CVAL4" : {
					"offset": "0x144",
					"reset": "0x0",
					"action":"ignore"
				},
				"CVAL5" : {
					"offset": "0x154",
					"reset": "0x0",
					"action":"ignore"
				},
				"CVAL6" : {
					"offset": "0x164",
					"reset": "0x0",
					"action":"ignore"
				}

			},
			"size":"0x200"
		},
		"SPI":{
			"soc": "s32g2",
			"name": "spi",
			"offset" : "0x401D8000",
			"description": "SPI Module",
			"helpers": "",
			"registers": {
				"SR" : {
					"offset": "0x2C",
					"reset": "0x02010000",
					"action":"PERFORM_WRITE(REG_SR, PERFORM_READ(REG_SR) & ~val);"
				},
				"MCR" : {
					"offset": "0x0",
					"reset": "0x00004001",
					"action":"if((val&0x1)==0)PERFORM_WRITE(REG_SR, PERFORM_READ(REG_SR) | BIT(30));"
				}

			},
			"size":"0x200",
			"min_access":1
		},
		"HSEMU":{
			"soc": "s32g2",
			"name": "hsemu",
			"offset" : "0x40210000",
			"description": "HSE messaging Unit Module",
			"helpers": "",
			"registers": {
				"VER" : {
					"offset": "0x0",
					"reset": "0x0300000F",
					"action":"ignore"
				},
				"PAR" : {
					"offset": "0x4",
					"reset": "0x20201010",
					"action":"ignore"
				}

			},
			"size":"0x1000"
		},
		"DDRSS":{
			"soc": "s32g2",
			"name": "ddrss",
			"offset" : "0x403C0000",
			"description": "DDR Subsystem",
			"helpers": "",
			"registers": {
				"STAT" : {
					"offset": "0x4",
					"reset": "0x0",
					"action":"ignore"
				},
				"DFIMISC" : {
					"offset": "0x1b0",
					"reset": "0x41",
					"action":"if((val&BIT(5))==BIT(5)) PERFORM_WRITE(REG_DFISTAT, BIT(0));\nif((val&BIT(0))==BIT(0)) PERFORM_WRITE(REG_STAT, 1);"
				},
				"DFISTAT" : {
					"offset": "0x1bc",
					"reset": "0x0",
					"action":"ignore"
				},
				"SWCTL" : {
					"offset": "0x320",
					"reset": "0x0",
					"action":"PERFORM_WRITE(REG_SWSTAT, val);"
				},
				"SWSTAT" : {
					"offset": "0x324",
					"reset": "0x0",
					"action":"ignore"
				},
				"SBRCTL" : {
					"offset": "0xf24",
					"reset": "0x0",
					"action":"if((val&BIT(0))==BIT(0)) PERFORM_WRITE(REG_SBRSTAT, BIT(1));"
				},
				"SBRSTAT" : {
					"offset": "0xf28",
					"reset": "0x0",
					"action":"ignore"
				}

			},
			"size":"0x1000",
			"min_access":1
		},
		"DDRPHY":{
			"soc": "s32g2",
			"name": "ddrphy",
			"offset" : "0x40380000",
			"description": "DDR PHY",
			"helpers": "",
			"registers": {
				"NAME1" : {
					"offset": "0x420",
					"reset": "0x0",
					"action":"PERFORM_WRITE(REG_UCTSHADOW, 0);"
				},
				"NAME2" : {
					"offset": "0x40c",
					"reset": "0x0",
					"action":"PERFORM_WRITE(REG_UCTSHADOW, 1);"
				},
				"UCTSHADOW" : {
					"offset": "0x404",
					"reset": "0x0",
					"action":"ignore"
				},
				"UCTWRITEONLY" : {
					"offset": "0x410",
					"reset": "0x7"
				}

			},
			"size":"0x10000",
			"min_access":1
		},
		"SERDES":{
			"soc": "s32g2",
			"name": "serdes",
			"offset" : "0x40480000",
			"description": "SERDES",
			"helpers": "",
			"registers": {
				"MPLLA_CTRL" : {
					"offset": "0x10",
					"reset": "0xC0000001",
					"action":"ignore"
				},
				"MPLLB_CTRL" : {
					"offset": "0x14",
					"reset": "0xC0000001",
					"action":"ignore"
				},
				"SS_RO_REG_0" : {
					"offset": "0xE0",
					"reset": "0x03FCC018",
					"action":"ignore"
				},
				"SS_RO_REG_1" : {
					"offset": "0xE4",
					"reset": "0x08010000",
					"action":"ignore"
				},
				"PE0_LINK_DBG_2" : {
					"offset": "0x10B4",
					"reset": "0xD1",
					"action":"ignore"
				},
				"XPCS_STAT1" : {
					"offset": "0x2040",
					"reset": "0x10",
					"action":"ignore"
				},
				"XPCS_SR_MII_STAT" : {
					"offset": "0x2000",
					"reset": "0x0",
					"action":"break;"
				},
				"XPCS_BITS" : {
					"offset": "0x20c8",
					"reset": "0x0",
					"action":"break;"
				},
				"XPCS_BITS2" : {
					"offset": "0x2148",
					"reset": "0x0",
					"action":"break;"
				},
				"XPCS_MII_STAT" : {
					"offset": "0x2800",
					"reset": "0x0",
					"action":"break;"
				},
				"XPCS_STAT2" : {
					"offset": "0x2840",
					"reset": "0x10",
					"action":"ignore"
				},
				"XPCS_SR_MII_CTRL" : {
					"offset": "0x23fc",
					"reset": "0x0",
					"action":"PERFORM_WRITE(REG_XPCS_SR_MII_STAT, 0); PERFORM_WRITE(REG_XPCS_BITS, 0); PERFORM_WRITE(REG_XPCS_BITS2, 0);"
				},
				"XPCS_MII_CTRL" : {
					"offset": "0x2bfc",
					"reset": "0x0",
					"action":"PERFORM_WRITE(REG_XPCS_MII_STAT, PERFORM_READ(REG_XPCS_MII_STAT) & ~BIT(15));"
				}


			},
			"size":"0x40000",
			"min_access":1
		},
		"SIUL2_1":{
			"soc": "s32g2",
			"name": "siul2_1",
			"offset" : "0x44010000",
			"description": "System Integration Unit Lite2 1",
			"helpers": "",
			"registers": {
				"MIDR1" : {
					"offset": "0x4",
					"reset": "0x4c200412",
					"action":"ignore"
				},
				"MIDR2" : {
					"offset": "0x8",
					"reset": "0x0112c000",
					"action":"ignore"
				},
				"DISR0" : {
					"offset": "0x10",
					"reset": "0x0",
					"action":"PERFORM_WRITE(REG_DISR0, PERFORM_READ(REG_DISR0) & ~val);"
				}

			},
			"size":"0x2000",
			"min_access":1
		},
		"MC_CGM2":{
			"soc": "s32g2",
			"name": "mc_cgm2",
			"offset" : "0x44018000",
			"description": "Clock Generation Module 2",
			"helpers": "",
			"registers": {
				"MUX_0_CSC" : {
					"offset": "0x300",
					"reset": "0x0",
					"action": "PERFORM_WRITE(REG_MUX_0_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_0_CSS, (val & 0x3F00000F) | BIT(17));"
				},
				"MUX_0_CSS" : {
					"offset": "0x304",
					"reset": "0x80000",
					"action": "ignore"
				},
				"MUX_1_CSC" : {
					"offset": "0x340",
					"reset": "0x0",
					"action": "PERFORM_WRITE(REG_MUX_1_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_1_CSS, (val & 0x3F00000F) | BIT(17));"
				},
				"MUX_1_CSS" : {
					"offset": "0x344",
					"reset": "0x80000",
					"action": "ignore"
				},
				"MUX_2_CSC" : {
					"offset": "0x380",
					"reset": "0x0",
					"action": "PERFORM_WRITE(REG_MUX_2_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_2_CSS, (val & 0x3F00000F) | BIT(17));"
				},
				"MUX_2_CSS" : {
					"offset": "0x384",
					"reset": "0x80000",
					"action": "ignore"
				},
				"MUX_3_CSC" : {
					"offset": "0x3c0",
					"reset": "0x0",
					"action": "PERFORM_WRITE(REG_MUX_3_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_3_CSS, (val & 0x3F00000F) | BIT(17));"
				},
				"MUX_3_CSS" : {
					"offset": "0x3C4",
					"reset": "0x00080000",
					"action": "ignore"
				},
				"MUX_4_CSC" : {
					"offset": "0x400",
					"reset": "0x00000000",
					"action": "PERFORM_WRITE(REG_MUX_4_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_4_CSS, (val & 0x3F00000F) | BIT(17));"
				},
				"MUX_4_CSS" : {
					"offset": "0x404",
					"reset": "0x00080000",
					"action": "ignore"
				},
				"MUX_5_CSC" : {
					"offset": "0x440",
					"reset": "0x00000000",
					"action": "PERFORM_WRITE(REG_MUX_5_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_5_CSS, (val & 0x3F00000F) | BIT(17));"
				},
				"MUX_5_CSS" : {
					"offset": "0x444",
					"reset": "0x00080000",
					"action": "ignore"
				},
				"MUX_6_CSC" : {
					"offset": "0x480",
					"reset": "0x00000000",
					"action": "PERFORM_WRITE(REG_MUX_6_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_6_CSS, (val & 0x3F00000F) | BIT(17));"
				},
				"MUX_6_CSS" : {
					"offset": "0x484",
					"reset": "0x00080000",
					"action": "ignore"
				},
				"MUX_7_CSC" : {
					"offset": "0x4c0",
					"reset": "0x00000000",
					"action": "PERFORM_WRITE(REG_MUX_7_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_7_CSS, (val & 0x3F00000F) | BIT(17));"
				},
				"MUX_7_CSS" : {
					"offset": "0x4c4",
					"reset": "0x00080000",
					"action": "ignore"
				},
				"MUX_8_CSC" : {
					"offset": "0x500",
					"reset": "0x00000000",
					"action": "PERFORM_WRITE(REG_MUX_8_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_8_CSS, (val & 0x3F00000F) | BIT(17));"
				},
				"MUX_8_CSS" : {
					"offset": "0x504",
					"reset": "0x00080000",
					"action": "ignore"
				},
				"MUX_9_CSC" : {
					"offset": "0x540",
					"reset": "0x00000000",
					"action": "PERFORM_WRITE(REG_MUX_9_CSC, (val & 0xFFFFFFF0)); /* Auto clear */\nPERFORM_WRITE(REG_MUX_9_CSS, (val & 0x3F00000F) | BIT(17));"
				},
				"MUX_9_CSS" : {
					"offset": "0x544",
					"reset": "0x00080000",
					"action": "ignore"
				}

			},
			"size":"0x600"
		},
		"ADC":{
			"soc": "s32g2",
			"name": "adc",
			"offset" : "0x401F8000",
			"description": "Analogue to Digital Converter",
			"helpers": "",
			"registers": {
				"ISR" : {
					"offset": "0x10",
					"reset": "0x1F",
					"action":"ignore"
				},
				"PCDR0" : {
					"offset": "0x100",
					"reset": "0x00080084",
					"action":"ignore"
				},
				"PCDR1" : {
					"offset": "0x104",
					"reset": "0x00080084",
					"action":"ignore"
				},
				"PCDR2" : {
					"offset": "0x108",
					"reset": "0x00080084",
					"action":"ignore"
				},
				"PCDR3" : {
					"offset": "0x10C",
					"reset": "0x00080084",
					"action":"ignore"
				},
				"PCDR4" : {
					"offset": "0x110",
					"reset": "0x00080084",
					"action":"ignore"
				},
				"PCDR5" : {
					"offset": "0x114",
					"reset": "0x00080084",
					"action":"ignore"
				},
				"PCDR6" : {
					"offset": "0x118",
					"reset": "0x00080084",
					"action":"ignore"
				},
				"PCDR7" : {
					"offset": "0x11C",
					"reset": "0x00080084",
					"action":"ignore"
				}

			},
			"size":"0x400"
		},
		"NCORE":{
			"soc": "s32g2",
			"name": "ncore",
			"offset" : "0x50400000",
			"description": "Ncore concerto config",
			"helpers": "",
			"registers": {
				"STAT" : {
					"offset": "0x0",
					"reset": "0x0"
				}

			},
			"size":"0x100000",
			"min_access":1,
			"max_access":8
		}
	}
}
