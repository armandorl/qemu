

import json
import sys
import os

BASE_DIR=os.path.dirname(os.path.abspath(__file__))
MODULEPATH=BASE_DIR + "/hw/misc/"
MODULEINCPATH=BASE_DIR + "/include/hw/misc/"
if len(sys.argv) < 2:
    print("Usage module_generator.py module.json")
    sys.exit(-1)



module_file=sys.argv[1]
print("Processing %s" % module_file )
# Opening JSON file
with  open(module_file) as f:  
    # returns JSON object as 
    # a dictionary
    data = json.load(f)
      
    # Iterating through the json
    # list
    for module in data['module']:
        soc_name = data['module'][module]['soc']
        module_name   = data['module'][module]['name']
        module_upper = module_name.upper()
        module_description = data['module'][module]['description']
        module_size = data['module'][module]['size']
        module_helpers = data['module'][module]['helpers']
        module_register_map="enum {\n"
        module_register_reset=""
        module_register_write="\n"
        for reg in data['module'][module]['registers']:
            offset = data['module'][module]['registers'][reg]['offset']
            val = data['module'][module]['registers'][reg]['reset']
            try:
                action = data['module'][module]['registers'][reg]['action']
            except:
                action = None
            module_register_map= module_register_map +  "\tREG_" + reg + "=\t" + offset + ",\n"
            module_register_reset= module_register_reset + "\tPERFORM_WRITE(REG_" + reg + "," + val + ");\n"
            if action != None and action != 'ignore':
                module_register_write= module_register_write + "\t\tcase REG_" + reg + ":\n\t\t\t" + action + "\n;\t\t\tbreak;\n"
            elif action == 'ignore':
                module_register_write= module_register_write + "\t\tcase REG_" + reg + ":\n\t\t\treturn;\n"
        module_register_map= module_register_map + "};\n"
      

        with open(MODULEPATH + "/" + soc_name + "/" + module_name + ".c", "w") as f:
            with open(MODULEPATH + "/" + soc_name + "/template.txt") as template:
                template_text = template.read()
                try:
                    f.write("/* WARNING: This file is autogenerated do not modify manually */\n")
                    f.write(template_text.format(soc=soc_name,
                                    module=module_name, 
                                    module_upper=module_upper,
                                    module_description=module_description,
                                    registers=module_register_map,
                                    registers_reset=module_register_reset,
                                    registers_write=module_register_write,
                                    module_size=module_size,
                                    helpers=module_helpers))
                except Exception as e:
                    print("ERROR: Failed to write source... " + str(e))
        
        with open(MODULEINCPATH + "/" + soc_name + "/" + module_name + ".h", "w") as f:
            with open(MODULEINCPATH + "/" + soc_name + "/template.txt") as template:
                template_text = template.read()
                try:
                    f.write("/* WARNING: This file is autogenerated do not modify manually */\n")
                    f.write(template_text.format(soc=soc_name,
                                    module=module_name,
                                    module_upper=module_upper,
                                    module_description=module_description,
                                    register_map=module_register_map,
                                    module_size=module_size))
                except Exception as e:
                    print("ERROR: Failed to write header... " + str(e))
