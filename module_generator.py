

import json
import sys
import os

BASE_DIR=os.path.dirname(os.path.abspath(__file__))
MODULEPATH=BASE_DIR + "/hw/misc/"
MODULEINCPATH=BASE_DIR + "/include/hw/misc/"
if len(sys.argv) < 2:
    print("Usage module_generator.py module.json")
    sys.exit(-1)



module_file=sys.argv[1]
print("Processing %s" % module_file )
# Opening JSON file
with  open(module_file) as f:  
    # returns JSON object as 
    # a dictionary
    data = json.load(f)
      
    # Iterating through the json
    # list
    soc_name = data['module']['soc']
    module   = data['module']['name']
    module_upper = module.upper()
    module_description = data['module']['description']
    module_register_map = data['module']['register_map']
    module_size = data['module']['size']
      

with open(MODULEPATH + "/" + soc_name + "/" + module + ".c", "w") as f:
    with open(MODULEPATH + "/" + soc_name + "/template.txt") as template:
        template_text = template.read()
        try:
            f.write("/* WARNING: This file is autogenerated do not modify manually */\n")
            f.write(template_text.format(soc=soc_name,
                            module=module, 
                            module_upper=module_upper,
                            module_description=module_description,
                            register_map=module_register_map,
                            module_size=module_size))
        except Exception as e:
            print("ERROR: Failed to write source... " + str(e))

with open(MODULEINCPATH + "/" + soc_name + "/" + module + ".h", "w") as f:
    with open(MODULEINCPATH + "/" + soc_name + "/template.txt") as template:
        template_text = template.read()
        try:
            f.write("/* WARNING: This file is autogenerated do not modify manually */\n")
            f.write(template_text.format(soc=soc_name,
                            module=module, 
                            module_upper=module_upper,
                            module_description=module_description,
                            register_map=module_register_map,
                            module_size=module_size))
        except Exception as e:
            print("ERROR: Failed to write header... " + str(e))
